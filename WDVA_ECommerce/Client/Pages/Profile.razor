@page "/profile"
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<AuthorizeView>
	<h3>Logged in as <i>@context.User.Identity.Name</i></h3>
</AuthorizeView>

<h5>Personal Information</h5>
<PersonalInfoForm />
<p></p>

<br />
<h5>Change Password</h5>

<EditForm Model="request" OnValidSubmit="ChangePassword">
	<DataAnnotationsValidator />
	<div class="mb-3">
		<label for="password">New Password</label>
		<InputText id="password" @bind-Value="request.Password" class="form-control" type="password" />
		<ValidationMessage For="@(() => request.Password)" />
	</div>
	<div class="mb-3">
		<label for="confirmPassword">Confirm New Password</label>
		<InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
		<ValidationMessage For="@(() => request.ConfirmPassword)" />
	</div>
	<button type="submit" class="btn btn-primary">Apply</button>

</EditForm>

<div>
	<br/>	
	<h3>Danger Zone!</h3>
	<hr />
	<button class="btn btn-danger" @onclick="() => Delete()">Delete My Account</button>
</div>

<span>@message</span>

@code {
	UserChangePassword request = new UserChangePassword();
	string message = string.Empty;

	string deleteMessage = "Are you sure you want to delete your account?";

	private async Task ChangePassword()
	{
		var result = await AuthService.ChangePassword(request);
		message = result.Message;
	}

	private async Task Delete()
	{
		if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete your account?"))
			return;

		await AuthService.DeleteAccount();
		await LocalStorage.RemoveItemAsync("authToken");
		await AuthenticationStateProvider.GetAuthenticationStateAsync();
		NavigationManager.NavigateTo("register");


	}
}
