@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService

<PageTitle>Login</PageTitle>

<div class="container">
	<h3>Please Login</h3>
	<EditForm Model="user" OnValidSubmit="HandleLogin">
		<DataAnnotationsValidator />
		<div class="mb-3">	
			<label for="email">Email</label>
			<InputText id="email" @bind-Value="user.Email" class="form-control" type="email"/>
			<ValidationMessage For="@(() => user.Email)" />
		</div>
		<div class="mb-3">
			<label for="password">Password</label>
			<InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
			<ValidationMessage For="@(() => user.Password)" />
		</div>
		<button type="submit" class="btn">Login</button>
		
		<p class="text">Don't have an account? <a href="register">Register</a></p>
	</EditForm>
	<div class="text-danger">
		<span>@errorMessage</span>
	</div>
</div>


@code {
	private UserLogin user = new UserLogin();
	private string errorMessage = string.Empty;

	[Parameter]
	[SupplyParameterFromQuery(Name = "returnUrl")]
	public string? returnUrl { get; set; } = string.Empty;

	private async Task HandleLogin()
	{
		var result = await AuthService.Login(user);
		if (result.Success)
		{
			errorMessage = string.Empty;
			await LocalStorage.SetItemAsync("authToken", result.Data);
			await AuthenticationStateProvider.GetAuthenticationStateAsync();
			await CartService.StoreCartItems(true);
			await CartService.GetCartItemsCount();
			NavigationManager.NavigateTo(returnUrl);
		}
		else
		{
			errorMessage = result.Message;
		}
	}

}
