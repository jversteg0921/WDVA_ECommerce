@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@attribute [Authorize]

<PageTitle>Shopping Cart</PageTitle>
<h3>Shopping Cart</h3>

@if(cartProducts == null || cartProducts.Count == 0)
{
	<span>@message</span>
}
else if (orderPlaced)
{
	<span>Thank you for your order! You can check your orders <a href="orders">here</a>.</span>
}
else
{
	<div>
		@foreach(var product in cartProducts)
		{
			<div class="container">
				<div class="image-wrapper">
					<img src="@product.ImgUrl" class="image" />
				</div>
				<div class="name">
					<h5><a href="/product/@product.ProductId">@product.Title</a></h5>
					<input type="number" class="form-control input-quantity" autocomplete="off" value="@product.Quantity" @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" min="1" />
					<button class="btn-delete" @onclick="@(() => RemoveProductFromCart(product.ProductId))">Delete</button>
				</div>
				<div class="cart-product-price">
					$@(product.Price * product.Quantity)
				</div>
			</div>
		}
		<div class="cart-product-price">
			Total (@cartProducts.Count): $@cartProducts.Sum(product => @product.Price * product.Quantity )
		</div>
	</div>
	@if (isAuthenticated)
	{
		<div>
			<h5>Delivery Address</h5>
			<PersonalInfoForm />
		</div>
	}
	<button @onclick="PlaceOrder" class="btn btn-success float-end mt-1">Place Order</button>
}

@code {
	List<CartProductDTO> cartProducts = null;
	string message = "Loading cart...";
	bool orderPlaced = false;
	bool isAuthenticated = false;

	protected override async Task OnInitializedAsync()
	{
		isAuthenticated = await AuthService.IsUserAuthenticated();
		orderPlaced = false;
		await LoadCart();
	}

	private async Task RemoveProductFromCart(int productId)
	{
		await CartService.RemoveProductFromCart(productId);
		await LoadCart();

	}

	private async Task LoadCart()
	{
		await CartService.GetCartItemsCount();
		cartProducts = await CartService.GetCartProducts();
		if (cartProducts == null || cartProducts.Count == 0)
		{
			message = "Your cart is empty.";
			cartProducts = new List<CartProductDTO>();
		}
	}

	private async Task UpdateQuantity(ChangeEventArgs e, CartProductDTO product)
	{
		product.Quantity = int.Parse(e.Value.ToString());
		if (product.Quantity < 1)
			product.Quantity = 1;

		await CartService.UpdateQuantity(product);
	}

	private async Task PlaceOrder()
	{
		await OrderService.PlaceOrder();
		await CartService.GetCartItemsCount();
		orderPlaced = true;
	}
}
