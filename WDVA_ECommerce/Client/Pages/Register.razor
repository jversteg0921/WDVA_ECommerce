@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Registration</PageTitle>

<div class="container">
	<h3>Registration</h3>
	@if (!successfulRegistration)
	{


		<EditForm Model="user" OnValidSubmit="HandleRegistration">
			<DataAnnotationsValidator />
			@*TODO: Update below to gather personal information*@
			<div class="mb-3">
				<label for="firstname">First Name</label>
				<InputText id="firstname" @bind-Value="user.PersonalInfo.FirstName" class="form-control" />
				<ValidationMessage For="@(() => user.PersonalInfo.FirstName)" />
			</div>
			<div class="mb-3">
				<label for="lastname">Last Name</label>
				<InputText id="lastname" @bind-Value="user.PersonalInfo.LastName" class="form-control" />
				<ValidationMessage For="@(() => user.PersonalInfo.LastName)" />
			</div>
			<div class="mb-3">
				<label for="street">Street</label>
				<InputText id="street" @bind-Value="user.PersonalInfo.Street" class="form-control" />
				<ValidationMessage For="@(() => user.PersonalInfo.Street)" />
			</div>
			<div class="mb-3">
				<label for="city">City</label>
				<InputText id="city" @bind-Value="user.PersonalInfo.City" class="form-control" />
				<ValidationMessage For="@(() => user.PersonalInfo.City)" />
			</div>
			<div class="mb-3">
				<label for="state">State</label>
				<InputText id="state" @bind-Value="user.PersonalInfo.State" class="form-control"  />
				<ValidationMessage For="@(() => user.PersonalInfo.State)" />
			</div>
			<div class="mb-3">
				<label for="zip">ZIP Code</label>
				<InputText id="zip" @bind-Value="user.PersonalInfo.Zip" class="form-control" />
				<ValidationMessage For="@(() => user.PersonalInfo.Zip)" />
			</div>
			<div class="mb-3">
				<label for="country">Country</label>
				<InputText id="country" @bind-Value="user.PersonalInfo.Country" class="form-control" />
				<ValidationMessage For="@(() => user.PersonalInfo.Country)" />
			</div>
			<div class="mb-3">
				<label>Phone</label>
				<InputMask @bind-Value="user.PersonalInfo.Phone" class="form-control" data-mask="(000) 000-0000" />
				<ValidationMessage For="@(() => user.PersonalInfo.Phone)" />
			</div>
			<div class="mb-3">
				<label for="dob">Date of Birth</label>
				<InputDate id="dob" @bind-Value="user.PersonalInfo.DOB" class="form-control"/>
				<ValidationMessage For="@(() => user.PersonalInfo.DOB)" />
			</div>
			<div class="mb-3">
				<label for="gender">Gender</label>
				<InputText id="gender" @bind-Value="user.PersonalInfo.Gender" class="form-control" />
				<ValidationMessage For="@(() => user.PersonalInfo.Gender)" />
			</div>


			<div class="mb-3">
				<label for="email">Email</label>
				<InputText id="email" @bind-Value="user.Email" class="form-control" />
				<ValidationMessage For="@(() => user.Email)" />
			</div>
			<div class="mb-3">
				<label for="password">Password</label>
				<InputText id="password" @bind-Value="user.Password" class="form-control" type=@hidePass />
				<ValidationMessage For="@(() => user.Password)" />
			</div>
			<div class="mb-3">
				<label for="confirmPassword">Confirm Password</label>
				<InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type=@hidePass />
				<ValidationMessage For="@(() => user.ConfirmPassword)" />
			</div>
			<div class="@messageCssClass">
				<span><center>@message</center></span>
			</div>
			<button type="submit" class="btn btn-primary">Register</button>
		</EditForm>
		
		<div>
			<center>Or</center>
		<button class="btn btn-primary" onclick="@(async () => await PopulateFromAPI())">Create User from RandomUser</button>
		</div>

		
	}
	else
	{
		<div class="@messageCssClass">
			<span><center>@message</center></span>
			<center>Please login <a href="login">here</a></center>
		</div>
		
	}
</div>

@code {
	UserRegister user = new UserRegister();

	bool successfulRegistration = false;

	string message = string.Empty;
	string messageCssClass = string.Empty;
	string hidePass = "password";

	async Task HandleRegistration()
	{
		var result = await AuthService.Register(user);
		message = result.Message;
		if (!result.Success)
		{
			messageCssClass = "text-bad";
		}
		else
		{
			messageCssClass = "text-good";
			successfulRegistration = true;
		}
	}

	async Task PopulateFromAPI()
	{
		user = await AuthService.PopulateRandomUser();		
		hidePass = string.Empty;
		messageCssClass = "text-good";
		message = "User generated! Memorize the email and password, then click Register";
	}
}
